class Knots():
  Finder finder;
  Atter atter;
  Padder padder;
  Extrapolator extrapolator;

  def Knots(vec: knots_values):
    something gets initialised

  def find(x): -> index || value_error
    if out_of_bounds(x):
      x = extrapolator.extrapolate(x)

    index = finder.find(x)

  def at(i):
    return atter.at(i)

  def out_of_bounds(x): -> requires_extrapolation
    return x < atter.at(p) or x >= atter.at(n-p):

class Finder():
  Atter atter

  def Finder(atter):
    self.atter = atter

  def find(x):
    if self.atter.domain_length() < 100:
      return self.linear_search(x)
    else:
      return self.binary_search(x)

  def find_ordered(x)

  def find_vectorised(vec: x)

class Atter():
  Data data;
  Padder padder;

  def Atter(data):
    self.data = Data(data)
    self.padder = Padder(self.data)

  def at(i):
    if i < p || i > n - p:
      return self.padder.at(i)
    else:
      reutrn self.data.at(i)

  def at_in_domain(i):
    return self.data.at(i)

  def domain_length():
    return self.data.length

class Padder():
  left
  right

  def Padder(Data &data):
    if boundary_condition == OPEN:
      self.open_pad(data)
    elif boundary_condition == CLAMPED:
      self.clamped_pad(data)
    elif boundary_condition == PERIODIC:
      self.periodic_pad(data)


  def open_pad(Data &data):
    self.left = data[:p]
    self.right = data[-p:]
    data.reduce_domain(p, p)

  def clamped_pad(Data &data):
    self.left = data[0] * ones(p)
    self.right = data[-1] * ones(p)

  def periodic_pad(Data &data):
    period = data[-1] - data[0]
    self.left = data[-p - 1:-1] - period
    self.right = data[1:p + 1] + period

  def left(i):
    self.left[i]

  def right(i):
    self.right[i]

class Data():
  raw_data
  begin
  end
  step_size

  def Data(data):
    if curve_type == UNIFORM:
      self.raw_data = null
      self.begin = data[0]
      self.end = data[-1]
      self.step_size = data[1] - data[0]
    elif curve_type == NON_UNIFORM:
      self.raw_data = memcopy(data)

  def at(i): -> value
    if curve_type == UNIFORM:
      value = self.begin + i * self.step_size
      return value if value <= end else ValueError
    elif curve_type == NON_UNIFORM:
      return self.raw_data[i]

  def reduce_domain(from_begin, from_end):
    if curve_type == UNIFORM:
      self.raw_data = null
      self.begin += from_begin * step_size
      self.end -= from_end * step_size
    elif curve_type == NON_UNIFORM:
      self.raw_data = self.raw_data[from_begin:-from_end]

class Extrapolator():

  Atter atter

  def Extrapolator(atter):
    self.atter = atter

  def extrapolate(x):
    if exptrapolation == NONE:
      return ValueError
    else:
      return p if x < atter.at(p) else n - p - 1
