// Third-party includes
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include <random>

// BSplineX includes
#include "bspline/bspline.hpp"
#include "bspline/bspline_types.hpp"

using namespace Catch::Matchers;
using namespace bsplinex;
using namespace bsplinex::bspline;

/**
 * Rerefence data can be generated using the `reference_sbpline.py` file in the
 * tests folder
 */

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::OPEN, Extrapolation::NONE> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 4.9, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  types::OpenNonUniform<double> bspline{t_data, c_data, degree};

  // clang-format off
  std::vector<double> x_values{2.2, 2.3000000000000003, 2.4000000000000004, 2.5000000000000004, 2.6000000000000005, 2.7000000000000006, 2.8000000000000007, 2.900000000000001, 3.000000000000001, 3.100000000000001, 3.200000000000001, 3.300000000000001, 3.4000000000000012, 3.5000000000000013, 3.6000000000000014, 3.7000000000000015, 3.8000000000000016, 3.9000000000000017, 4.000000000000002, 4.100000000000001, 4.200000000000002, 4.3000000000000025, 4.400000000000002, 4.500000000000002, 4.600000000000002, 4.700000000000003, 4.8000000000000025, 4.900000000000002, 5.000000000000003, 5.100000000000003, 5.200000000000003, 5.3000000000000025, 5.400000000000003, 5.5000000000000036, 5.600000000000003, 5.700000000000003, 5.800000000000003, 5.900000000000004, 6.0000000000000036, 6.100000000000003, 6.200000000000004};
  std::vector<double> y_values{0.4, 0.4987905929445725, 0.5953834608104188, 0.6901102371457323, 0.7833025554987059, 0.8752920494175335, 0.9664103524504085, 1.0569890981455239, 1.1473599200510731, 1.2378544517152497, 1.3288043266862466, 1.420541178512258, 1.5133966407414765, 1.6077023469220952, 1.7037899306023085, 1.8019910253303089, 1.9026372646542904, 2.0060602821224456, 2.112591711282968, 2.2225631856840518, 2.3363063388738903, 2.4541528044006755, 2.5764342158126015, 2.7034822066578617, 2.83562841048465, 2.9732044608411603, 3.1165419912755823, 3.2659726353361123, 3.4243850625148546, 3.604896086079547, 3.8231795552418366, 4.094909319213373, 4.435759227205808, 4.861403128430789, 5.387514872099959, 6.029768307424969, 6.8038372836174785, 7.725395649889126, 8.810117255451555, 10.073675949516419, 11.53174558129538};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }

  SECTION("bspline.compute_basis(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      std::vector<double> basis = bspline.basis(x_values.at(i));
      REQUIRE(basis.size() == c_data.size());
      double res{0.0};
      for (size_t j{0}; j < basis.size(); j++)
      {
        res += basis.at(j) * c_data.at(j);
      }
      REQUIRE_THAT(res, WithinRel(y_values.at(i)));
    }
  }

  SECTION("bspline.fit(...) dense")
  {
    bspline.fit(x_values, y_values);
    auto control_points = bspline.get_control_points();
    for (size_t i{0}; i < c_data.size(); i++)
    {
      REQUIRE_THAT(control_points.at(i), WithinRel(c_data.at(i), 1e-6));
    }
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i), 1e-6));
    }
  }

  // Finally test the sparse fit
  SECTION("bspline.fit(...) dense")
  {
    // Prepare a normal distribution
    std::random_device device{};
    std::mt19937 rng{device()};
    rng.seed(05535);
    std::normal_distribution norm{0.0, 1.0};

    // Generated big knots and ctrl points
    std::vector<double> big_ctrl_pts(13);
    std::vector<double> big_knots(big_ctrl_pts.size() + 3 + 1);
    std::generate(big_ctrl_pts.begin(), big_ctrl_pts.end(), [&norm, &rng]() { return norm(rng); });
    std::generate(big_knots.begin(), big_knots.end(), [n = 0]() mutable { return (double)n++; });

    types::OpenNonUniform<double> big_bspline{{big_knots}, {big_ctrl_pts}, degree};

    // Prepare a uniform distribution
    std::uniform_real_distribution unif{big_knots.at(3), big_knots.at(big_knots.size() - 4)};

    // Randomly sample points
    std::vector<double> big_x(1000);
    std::vector<double> big_y(big_x.size());
    std::generate(big_x.begin(), big_x.end(), [&unif, &rng]() { return unif(rng); });
    std::generate(
        big_y.begin(),
        big_y.end(),
        [i = 0, &big_bspline, &big_x]() mutable { return big_bspline.evaluate(big_x.at(i++)); }
    );

    big_bspline.fit(big_x, big_y);
    auto const &control_points = big_bspline.get_control_points();
    for (size_t i{0}; i < big_ctrl_pts.size(); i++)
    {
      REQUIRE_THAT(control_points.at(i), WithinRel(big_ctrl_pts.at(i), 1e-6));
    }
    for (size_t i{0}; i < big_x.size(); i++)
    {
      REQUIRE_THAT(big_bspline.evaluate(big_x.at(i)), WithinRel(big_y.at(i), 1e-6));
    }
  }

  SECTION("bspline.fit(...) sparse")
  {
    // Prepare a normal distribution
    std::random_device device{};
    std::mt19937 rng{device()};
    rng.seed(05535);
    std::normal_distribution norm{0.0, 1.0};

    // Generated big knots and ctrl points
    std::vector<double> big_ctrl_pts(713);
    std::vector<double> big_knots(big_ctrl_pts.size() + 3 + 1);
    std::generate(big_ctrl_pts.begin(), big_ctrl_pts.end(), [&norm, &rng]() { return norm(rng); });
    std::generate(big_knots.begin(), big_knots.end(), [n = 0]() mutable { return (double)n++; });

    types::OpenNonUniform<double> big_bspline{big_knots, big_ctrl_pts, degree};

    // Prepare a uniform distribution
    std::uniform_real_distribution unif{big_knots.at(3), big_knots.at(big_knots.size() - 4)};

    // Randomly sample points
    std::vector<double> big_x(10000);
    std::vector<double> big_y(big_x.size());
    std::generate(big_x.begin(), big_x.end(), [&unif, &rng]() { return unif(rng); });
    std::generate(
        big_y.begin(),
        big_y.end(),
        [i = 0, &big_bspline, &big_x]() mutable { return big_bspline.evaluate(big_x.at(i++)); }
    );

    big_bspline.fit(big_x, big_y);
    auto const &control_points = big_bspline.get_control_points();
    for (size_t i{0}; i < big_ctrl_pts.size(); i++)
    {
      REQUIRE_THAT(control_points.at(i), WithinRel(big_ctrl_pts.at(i), 1e-6));
    }
    for (size_t i{0}; i < big_x.size(); i++)
    {
      REQUIRE_THAT(big_bspline.evaluate(big_x.at(i)), WithinRel(big_y.at(i), 1e-6));
    }
  }
}

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::OPEN, Extrapolation::CONSTANT> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 4.9, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  types::OpenNonUniformConstant<double> bspline{t_data, c_data, degree};

  // clang-format off
  std::vector<double> x_values{-1.0, 0.0, 1.0, 2.2, 3.225, 4.25, 5.275, 6.3, 6.4, 6.9, 7.1};
  std::vector<double> y_values{0.4, 0.4, 0.4, 0.4, 1.3516518061271148, 2.3946959304983997, 4.0211091244533534, 13.2, 13.2, 13.2, 13.2};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }
}

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::CLAMPED, Extrapolation::NONE> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 2.5, 3.2, 4.3, 4.9, 5.6, 5.4, 0.3, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  types::ClampedNonUniform<double> bspline{t_data, c_data, degree};

  // clang-format off
  std::vector<double> x_values{0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0, 1.1, 1.2000000000000002, 1.3, 1.4000000000000001, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9000000000000001, 2.0, 2.1, 2.2, 2.3000000000000003, 2.4000000000000004, 2.5, 2.6, 2.7, 2.8000000000000003, 2.9000000000000004, 3.0, 3.1, 3.2, 3.3000000000000003, 3.4000000000000004, 3.5, 3.6, 3.7, 3.8000000000000003, 3.9000000000000004, 4.0, 4.1000000000000005, 4.2, 4.3, 4.4, 4.5, 4.6000000000000005, 4.7, 4.800000000000001, 4.9, 5.0, 5.1000000000000005, 5.2, 5.300000000000001, 5.4, 5.5, 5.6000000000000005, 5.7, 5.800000000000001, 5.9, 6.0, 6.1000000000000005, 6.2, 6.300000000000001, 6.4, 6.5, 6.6000000000000005, 6.7, 6.800000000000001, 6.9, 7.0, 7.1000000000000005, 7.2, 7.300000000000001, 7.4, 7.5, 7.6000000000000005, 7.7, 7.800000000000001, 7.9, 8.0, 8.1, 8.200000000000001, 8.3, 8.4, 8.5, 8.6, 8.700000000000001, 8.8, 8.9, 9.0, 9.1, 9.200000000000001, 9.3, 9.4, 9.5, 9.600000000000001, 9.700000000000001, 9.8, 9.9, 10.0, 10.100000000000001, 10.200000000000001, 10.3, 10.4, 10.5, 10.600000000000001, 10.700000000000001, 10.8, 10.9, 11.0, 11.100000000000001, 11.200000000000001, 11.3, 11.4, 11.5, 11.600000000000001, 11.700000000000001, 11.8, 11.9, 12.0, 12.100000000000001, 12.200000000000001, 12.3, 12.4, 12.5, 12.600000000000001, 12.700000000000001, 12.8, 12.9, 13.0, 13.100000000000001};
  std::vector<double> y_values{0.1, 0.38599773242630386, 0.6451247165532882, 0.8790816326530615, 1.0895691609977327, 1.2782879818594108, 1.4469387755102046, 1.5972222222222225, 1.7308390022675746, 1.849489795918368, 1.954875283446712, 2.0486961451247168, 2.13265306122449, 2.2083781249125165, 2.2772290809327846, 2.3404950869236583, 2.399465300523502, 2.455428879370679, 2.509674981103552, 2.5634927633604874, 2.6181713837798495, 2.675, 2.7341327228722783, 2.7947796390456796, 2.8568138698550487, 2.920108536635234, 2.984536760721082, 3.049971663447438, 3.116286366149151, 3.1833539901610672, 3.2510476568180313, 3.319240487454893, 3.387805603406498, 3.4566161260076926, 3.525545176593323, 3.594465876498238, 3.663251347057283, 3.731774709605305, 3.7999090854771507, 3.8675275960076667, 3.934503362531702, 4.0007095063841005, 4.066019148899709, 4.130305411413377, 4.193441415259949, 4.255300281774272, 4.315755132291193, 4.3746790881455615, 4.4319452706722196, 4.487649631536136, 4.542779443722759, 4.598544810547657, 4.6561558353263965, 4.716822621374545, 4.781755272007673, 4.852163890541345, 4.929258580291129, 5.014249444572595, 5.108346586701308, 5.212760109992836, 5.328700117762751, 5.457376713326616, 5.599999999999999, 5.588286470081489, 5.5708160202612405, 5.54800690392044, 5.520277374440273, 5.488045685201927, 5.451730089586586, 5.411748840975436, 5.368520192749664, 5.322462398290456, 5.273993710978998, 5.223532384196474, 5.171496671324073, 5.118304825742976, 5.064375100834375, 5.010125749979451, 4.955975026559393, 4.902341183955385, 4.849642475548615, 4.798297154720266, 4.748723474851525, 4.70133968932358, 4.656564051517614, 4.614814814814814, 4.576510232596366, 4.542068558243458, 4.511908045137272, 4.486446946658996, 4.466103516189815, 4.4512960071109156, 4.442442672803485, 4.439961766648707, 4.444271542027768, 4.455790252321855, 4.474936150912152, 4.502127491179847, 4.537782526506123, 4.582319510272169, 4.63615669585917, 4.699712336648312, 4.773404686020779, 4.857651997357759, 4.952872524040438, 5.0594845194500015, 5.177906236967634, 5.308555929974522, 5.451851851851853, 5.608212255980811, 5.7780553957425855, 5.961799524518356, 6.159862895689313, 6.37266376263664, 6.600620378741526, 6.844150997385161, 7.103673871948718, 7.37960725581339, 7.6723694023603635, 7.982378564970824, 8.310052997025965, 8.655810951906956, 9.02007068299499, 9.403250443671258, 9.80576848731694, 10.228043067313234, 10.670492437041306, 11.133534849882354, 11.617588559217563, 12.123071818428114, 12.650402880895207};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }
}

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::CLAMPED, "
    "Extrapolation::CONSTANT> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 2.5, 3.2, 4.3, 4.9, 5.6, 5.4, 0.3, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  types::ClampedNonUniformConstant<double> bspline{t_data, c_data, degree};

  // clang-format off
  std::vector<double> x_values{-1.0, -0.5, 0.0, 0.1, 1.1076923076923078, 2.1153846153846154, 3.123076923076923, 4.13076923076923, 5.138461538461538, 6.146153846153846, 7.153846153846153, 8.161538461538461, 9.169230769230769, 10.176923076923076, 11.184615384615384, 12.192307692307692, 13.2, 13.3, 13.5, 14.27};
  std::vector<double> y_values{0.1, 0.1, 0.1, 0.1, 1.9624811766612276, 2.626742034309111, 3.266744779462556, 3.9549623459514693, 4.564086352399691, 5.386433406653529, 5.34404474013388, 4.817858538359864, 4.455237409516784, 4.684161172431948, 5.932609645932666, 8.628562648846245, 13.2, 13.2, 13.2, 13.2};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }
}

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::PERIODIC, Extrapolation::NONE> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 3.2, 4.3, 5.6, 0.3, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  // Note: currently we do not have a typedef for this combination of template parameters
  BSpline<double, Curve::NON_UNIFORM, BoundaryCondition::PERIODIC, Extrapolation::NONE> bspline{
      t_data, c_data, degree
  };

  // To generate this reference data use the `reference.py` script in this
  // folder
  // clang-format off
  std::vector<double> x_values{0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0, 1.1, 1.2000000000000002, 1.3, 1.4000000000000001, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9000000000000001, 2.0, 2.1, 2.2, 2.3000000000000003, 2.4000000000000004, 2.5, 2.6, 2.7, 2.8000000000000003, 2.9000000000000004, 3.0, 3.1, 3.2, 3.3000000000000003, 3.4000000000000004, 3.5, 3.6, 3.7, 3.8000000000000003, 3.9000000000000004, 4.0, 4.1000000000000005, 4.2, 4.3, 4.4, 4.5, 4.6000000000000005, 4.7, 4.800000000000001, 4.9, 5.0, 5.1000000000000005, 5.2, 5.300000000000001, 5.4, 5.5, 5.6000000000000005, 5.7, 5.800000000000001, 5.9, 6.0, 6.1000000000000005, 6.2, 6.300000000000001, 6.4, 6.5, 6.6000000000000005, 6.7, 6.800000000000001, 6.9, 7.0, 7.1000000000000005, 7.2, 7.300000000000001, 7.4, 7.5, 7.6000000000000005, 7.7, 7.800000000000001, 7.9, 8.0, 8.1, 8.200000000000001, 8.3, 8.4, 8.5, 8.6, 8.700000000000001, 8.8, 8.9, 9.0, 9.1, 9.200000000000001, 9.3, 9.4, 9.5, 9.600000000000001, 9.700000000000001, 9.8, 9.9, 10.0, 10.100000000000001, 10.200000000000001, 10.3, 10.4, 10.5, 10.600000000000001, 10.700000000000001, 10.8, 10.9, 11.0, 11.100000000000001, 11.200000000000001, 11.3, 11.4, 11.5, 11.600000000000001, 11.700000000000001, 11.8, 11.9, 12.0, 12.100000000000001, 12.200000000000001, 12.3, 12.4, 12.5, 12.600000000000001, 12.700000000000001, 12.8, 12.9, 13.0, 13.100000000000001};
  std::vector<double> y_values{1.861440329218107, 1.893556155887138, 1.9262407422960037, 1.9604195011337873, 1.997017845089568, 2.036961186852428, 2.0811749391114476, 2.130584514555708, 2.186115325874292, 2.2486927857562784, 2.3192423068907493, 2.398689301966786, 2.4879591836734694, 2.587413426275861, 2.695157750342936, 2.8087339380196523, 2.9256837714509674, 3.0435490327818373, 3.159871504157218, 3.272192967722068, 3.3780552056213433, 3.4749999999999996, 3.5666476441605393, 3.6576692592764863, 3.747182869299334, 3.834306498180576, 3.918158169871705, 3.997855908324214, 4.072517737489597, 4.141261681319346, 4.203205763764954, 4.257468008777916, 4.303166440309725, 4.339419082311872, 4.36534395873585, 4.380059093533154, 4.382682510655278, 4.3723322340537125, 4.348126287679953, 4.309182695485491, 4.254619481421821, 4.183554669440435, 4.095106283492826, 3.9883923475304877, 3.862530885504914, 3.716639921367596, 3.549837479070029, 3.3612415825637054, 3.149970255800118, 2.9209296623382928, 2.7021785241673775, 2.527563702884059, 2.430932060085017, 2.446130457366935, 2.6070057563264952, 2.9474048185603823, 3.501174505665273, 4.302161679237861, 5.384213200874813, 6.781175932172817, 8.526896734728577, 10.655222470138739, 13.199999999999992, 12.639289623035173, 12.096113525624258, 11.570208605818676, 11.061311761669852, 10.569159891229212, 10.09348989254818, 9.63403866367818, 9.190543102670627, 8.762740107576958, 8.350366576448591, 7.953159407336951, 7.570855498293467, 7.2031917473695515, 6.8499050526166405, 6.5107323120861516, 6.185410423829514, 5.8736762858981475, 5.575266796343479, 5.289918853216925, 5.017369354569923, 4.757355198453889, 4.509613282920246, 4.273880506020423, 4.049893765805838, 3.837389960327923, 3.636105987638097, 3.445778745787785, 3.266145132828413, 3.0969420468114, 2.9379063857881773, 2.788775047810166, 2.6492849309287885, 2.519172933195469, 2.3981759526616355, 2.2860308873787094, 2.1824746353981155, 2.0872440947712785, 2.00007616354962, 1.920707739784567, 1.8488757215275438, 1.7843170068299727, 1.726768493743279, 1.6759670803188862, 1.6316496646082197, 1.5935531446627027, 1.5614144185337595, 1.5349703842728148, 1.5139579399312917, 1.4981139835606156, 1.4871754132122101, 1.4808791269374995, 1.478962022787908, 1.4811609988148595, 1.4872129530697789, 1.4968547836040895, 1.509823388469216, 1.5258556657165827, 1.544688513397614, 1.566058829563733, 1.5897035122663645, 1.6153594595569327, 1.6427635694868623, 1.6716527401075774, 1.701763869470501, 1.7328338556270588, 1.7645995966286736, 1.7967979905267706, 1.8291659353727738};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }
}

TEST_CASE(
    "bspline::BSpline<T, C, BoundaryCondition::PERIODIC, "
    "Extrapolation::PERIODIC> "
    "bspline{knots::Data<T, C> t_data, "
    "control_points::Data<T> c_data, degree}",
    "[bspline]"
)
{
  size_t degree{3};

  std::vector<double> t_data_vec{0.1, 1.3, 2.2, 2.2, 4.9, 6.3, 6.3, 6.3, 13.2};
  knots::Data<double, Curve::NON_UNIFORM> t_data{t_data_vec};

  std::vector<double> c_data_vec{0.1, 1.3, 2.2, 3.2, 4.3, 5.6, 0.3, 13.2};
  control_points::Data<double> c_data{c_data_vec};

  types::PeriodicNonUniform<double> bspline{t_data, c_data, degree};

  // To generate this reference data use the `reference.py` script in this
  // folder
  // clang-format off
  std::vector<double> x_values{-39.199999999999996, -39.099999999999994, -38.99999999999999, -38.89999999999999, -38.79999999999999, -38.69999999999999, -38.59999999999999, -38.499999999999986, -38.399999999999984, -38.29999999999998, -38.19999999999998, -38.09999999999998, -37.99999999999998, -37.89999999999998, -37.799999999999976, -37.699999999999974, -37.59999999999997, -37.49999999999997, -37.39999999999997, -37.29999999999997, -37.19999999999997, -37.099999999999966, -36.999999999999964, -36.89999999999996, -36.79999999999996, -36.69999999999996, -36.59999999999996, -36.49999999999996, -36.399999999999956, -36.299999999999955, -36.19999999999995, -36.09999999999995, -35.99999999999995, -35.89999999999995, -35.79999999999995, -35.699999999999946, -35.599999999999945, -35.49999999999994, -35.39999999999994, -35.29999999999994, -35.19999999999994, -35.09999999999994, -34.999999999999936, -34.899999999999935, -34.79999999999993, -34.69999999999993, -34.59999999999993, -34.49999999999993, -34.39999999999993, -34.299999999999926, -34.199999999999925, -34.09999999999992, -33.99999999999992, -33.89999999999992, -33.79999999999992, -33.69999999999992, -33.599999999999916, -33.499999999999915, -33.39999999999991, -33.29999999999991, -33.19999999999991, -33.09999999999991, -32.99999999999991, -32.899999999999906, -32.799999999999905, -32.6999999999999, -32.5999999999999, -32.4999999999999, -32.3999999999999, -32.2999999999999, -32.199999999999896, -32.099999999999895, -31.999999999999893, -31.899999999999892, -31.79999999999989, -31.69999999999989, -31.599999999999888, -31.499999999999886, -31.399999999999885, -31.299999999999883, -31.199999999999882, -31.09999999999988, -30.99999999999988, -30.899999999999878, -30.799999999999876, -30.699999999999875, -30.599999999999874, -30.499999999999872, -30.39999999999987, -30.29999999999987, -30.199999999999868, -30.099999999999866, -29.999999999999865, -29.899999999999864, -29.799999999999862, -29.69999999999986, -29.59999999999986, -29.499999999999858, -29.399999999999856, -29.299999999999855, -29.199999999999854, -29.099999999999852, -28.99999999999985, -28.89999999999985, -28.799999999999848, -28.699999999999847, -28.599999999999845, -28.499999999999844, -28.399999999999842, -28.29999999999984, -28.19999999999984, -28.099999999999838, -27.999999999999837, -27.899999999999835, -27.799999999999834, -27.699999999999832, -27.59999999999983, -27.49999999999983, -27.399999999999828, -27.299999999999827, -27.199999999999825, -27.099999999999824, -26.999999999999822, -26.89999999999982, -26.79999999999982, -26.699999999999818, -26.599999999999817, -26.499999999999815, -26.399999999999814, -26.299999999999812, -26.19999999999981, -26.09999999999981, -25.999999999999808, -25.899999999999807, -25.799999999999805, -25.699999999999804, -25.599999999999802, -25.4999999999998, -25.3999999999998, -25.299999999999798, -25.199999999999797, -25.099999999999795, -24.999999999999794, -24.899999999999793, -24.79999999999979, -24.69999999999979, -24.59999999999979, -24.499999999999787, -24.399999999999785, -24.299999999999784, -24.199999999999783, -24.09999999999978, -23.99999999999978, -23.89999999999978, -23.799999999999777, -23.699999999999775, -23.599999999999774, -23.499999999999773, -23.39999999999977, -23.29999999999977, -23.19999999999977, -23.099999999999767, -22.999999999999766, -22.899999999999764, -22.799999999999763, -22.69999999999976, -22.59999999999976, -22.49999999999976, -22.399999999999757, -22.299999999999756, -22.199999999999754, -22.099999999999753, -21.99999999999975, -21.89999999999975, -21.79999999999975, -21.699999999999747, -21.599999999999746, -21.499999999999744, -21.399999999999743, -21.29999999999974, -21.19999999999974, -21.09999999999974, -20.999999999999737, -20.899999999999736, -20.799999999999734, -20.699999999999733, -20.59999999999973, -20.49999999999973, -20.39999999999973, -20.299999999999727, -20.199999999999726, -20.099999999999724, -19.999999999999723, -19.89999999999972, -19.79999999999972, -19.69999999999972, -19.599999999999717, -19.499999999999716, -19.399999999999714, -19.299999999999713, -19.19999999999971, -19.09999999999971, -18.99999999999971, -18.899999999999707, -18.799999999999706, -18.699999999999704, -18.599999999999703, -18.4999999999997, -18.3999999999997, -18.2999999999997, -18.199999999999697, -18.099999999999696, -17.999999999999694, -17.899999999999693, -17.79999999999969, -17.69999999999969, -17.59999999999969, -17.499999999999687, -17.399999999999686, -17.299999999999685, -17.199999999999683, -17.09999999999968, -16.99999999999968, -16.89999999999968, -16.799999999999677, -16.699999999999676, -16.599999999999675, -16.499999999999673, -16.39999999999967, -16.29999999999967, -16.19999999999967, -16.099999999999667, -15.999999999999666, -15.899999999999665, -15.799999999999663, -15.699999999999662, -15.59999999999966, -15.499999999999659, -15.399999999999658, -15.299999999999656, -15.199999999999655, -15.099999999999653, -14.999999999999652, -14.89999999999965, -14.799999999999649, -14.699999999999648, -14.599999999999646, -14.499999999999645, -14.399999999999643, -14.299999999999642, -14.19999999999964, -14.099999999999639, -13.999999999999638, -13.899999999999636, -13.799999999999635, -13.699999999999633, -13.599999999999632, -13.49999999999963, -13.399999999999629, -13.299999999999628, -13.199999999999626, -13.099999999999625, -12.999999999999623, -12.899999999999622, -12.79999999999962, -12.69999999999962, -12.599999999999618, -12.499999999999616, -12.399999999999615, -12.299999999999613, -12.199999999999612, -12.09999999999961, -11.99999999999961, -11.899999999999608, -11.799999999999606, -11.699999999999605, -11.599999999999604, -11.499999999999602, -11.3999999999996, -11.2999999999996, -11.199999999999598, -11.099999999999596, -10.999999999999595, -10.899999999999594, -10.799999999999592, -10.69999999999959, -10.59999999999959, -10.499999999999588, -10.399999999999586, -10.299999999999585, -10.199999999999584, -10.099999999999582, -9.99999999999958, -9.89999999999958, -9.799999999999578, -9.699999999999577, -9.599999999999575, -9.499999999999574, -9.399999999999572, -9.29999999999957, -9.19999999999957, -9.099999999999568, -8.999999999999567, -8.899999999999565, -8.799999999999564, -8.699999999999562, -8.59999999999956, -8.49999999999956, -8.399999999999558, -8.299999999999557, -8.199999999999555, -8.099999999999554, -7.999999999999552, -7.899999999999551, -7.7999999999995495, -7.699999999999548, -7.599999999999547, -7.499999999999545, -7.399999999999544, -7.299999999999542, -7.199999999999541, -7.09999999999954, -6.999999999999538, -6.899999999999537, -6.799999999999535, -6.699999999999534, -6.5999999999995325, -6.499999999999531, -6.39999999999953, -6.299999999999528, -6.199999999999527, -6.099999999999525, -5.999999999999524, -5.8999999999995225, -5.799999999999521, -5.69999999999952, -5.599999999999518, -5.499999999999517, -5.399999999999515, -5.299999999999514, -5.199999999999513, -5.099999999999511, -4.99999999999951, -4.899999999999508, -4.799999999999507, -4.6999999999995055, -4.599999999999504, -4.499999999999503, -4.399999999999501, -4.2999999999995, -4.199999999999498, -4.099999999999497, -3.9999999999994955, -3.899999999999494, -3.7999999999994927, -3.6999999999994913, -3.59999999999949, -3.4999999999994884, -3.399999999999487, -3.2999999999994856, -3.199999999999484, -3.0999999999994827, -2.9999999999994813, -2.89999999999948, -2.7999999999994785, -2.699999999999477, -2.5999999999994756, -2.499999999999474, -2.3999999999994728, -2.2999999999994714, -2.19999999999947, -2.0999999999994685, -1.999999999999467, -1.8999999999994657, -1.7999999999994643, -1.6999999999994628, -1.5999999999994614, -1.49999999999946, -1.3999999999994586, -1.2999999999994571, -1.1999999999994557, -1.0999999999994543, -0.9999999999994529, -0.8999999999994515, -0.79999999999945, -0.6999999999994486, -0.5999999999994472, -0.4999999999994458, -0.39999999999944436, -0.29999999999944293, -0.1999999999994415, -0.09999999999944009, 5.613287612504791e-13, 0.10000000000056275, 0.20000000000056417, 0.3000000000005656, 0.400000000000567, 0.5000000000005684, 0.6000000000005699, 0.7000000000005713, 0.8000000000005727, 0.9000000000005741, 1.0000000000005755, 1.100000000000577, 1.2000000000005784, 1.3000000000005798, 1.4000000000005812, 1.5000000000005826, 1.600000000000584, 1.7000000000005855, 1.800000000000587, 1.9000000000005883, 2.0000000000005898, 2.100000000000591, 2.2000000000005926, 2.300000000000594, 2.4000000000005954, 2.500000000000597, 2.6000000000005983, 2.7000000000005997, 2.800000000000601, 2.9000000000006025, 3.000000000000604, 3.1000000000006054, 3.200000000000607, 3.3000000000006082, 3.4000000000006096, 3.500000000000611, 3.6000000000006125, 3.700000000000614, 3.8000000000006153, 3.9000000000006168, 4.000000000000618, 4.10000000000062, 4.200000000000621, 4.300000000000622, 4.400000000000624, 4.500000000000625, 4.600000000000627, 4.700000000000628, 4.8000000000006295, 4.900000000000631, 5.000000000000632, 5.100000000000634, 5.200000000000635, 5.300000000000637, 5.400000000000638, 5.5000000000006395, 5.600000000000641, 5.700000000000642, 5.800000000000644, 5.900000000000645, 6.000000000000647, 6.100000000000648, 6.200000000000649, 6.300000000000651, 6.400000000000652, 6.500000000000654, 6.600000000000655, 6.7000000000006565, 6.800000000000658, 6.900000000000659, 7.000000000000661, 7.100000000000662, 7.200000000000664, 7.300000000000665, 7.4000000000006665, 7.500000000000668, 7.600000000000669, 7.700000000000671, 7.800000000000672, 7.900000000000674, 8.000000000000675, 8.100000000000676, 8.200000000000678, 8.30000000000068, 8.40000000000068, 8.500000000000682, 8.600000000000684, 8.700000000000685, 8.800000000000686, 8.900000000000688, 9.00000000000069, 9.10000000000069, 9.200000000000692, 9.300000000000693, 9.400000000000695, 9.500000000000696, 9.600000000000698, 9.7000000000007, 9.8000000000007, 9.900000000000702, 10.000000000000703, 10.100000000000705, 10.200000000000706, 10.300000000000708, 10.40000000000071, 10.50000000000071, 10.600000000000712, 10.700000000000713, 10.800000000000715, 10.900000000000716, 11.000000000000718, 11.100000000000719, 11.20000000000072, 11.300000000000722, 11.400000000000723, 11.500000000000725, 11.600000000000726, 11.700000000000728, 11.800000000000729, 11.90000000000073, 12.000000000000732, 12.100000000000733, 12.200000000000735, 12.300000000000736, 12.400000000000738, 12.500000000000739, 12.60000000000074, 12.700000000000742, 12.800000000000743, 12.900000000000745, 13.000000000000746, 13.100000000000747, 13.200000000000749, 13.30000000000075, 13.400000000000752, 13.500000000000753, 13.600000000000755, 13.700000000000756, 13.800000000000757, 13.900000000000759, 14.00000000000076, 14.100000000000762, 14.200000000000763, 14.300000000000765, 14.400000000000766, 14.500000000000767, 14.600000000000769, 14.70000000000077, 14.800000000000772, 14.900000000000773, 15.000000000000774, 15.100000000000776, 15.200000000000777, 15.300000000000779, 15.40000000000078, 15.500000000000782, 15.600000000000783, 15.700000000000784, 15.800000000000786, 15.900000000000787, 16.00000000000079, 16.10000000000079, 16.20000000000079, 16.300000000000793, 16.400000000000794, 16.500000000000796, 16.600000000000797, 16.7000000000008, 16.8000000000008, 16.9000000000008, 17.000000000000803, 17.100000000000804, 17.200000000000806, 17.300000000000807, 17.40000000000081, 17.50000000000081, 17.60000000000081, 17.700000000000813, 17.800000000000814, 17.900000000000816, 18.000000000000817, 18.10000000000082, 18.20000000000082, 18.30000000000082, 18.400000000000823, 18.500000000000824, 18.600000000000826, 18.700000000000827, 18.80000000000083, 18.90000000000083, 19.00000000000083, 19.100000000000833, 19.200000000000834, 19.300000000000836, 19.400000000000837, 19.50000000000084, 19.60000000000084, 19.70000000000084, 19.800000000000843, 19.900000000000844, 20.000000000000846, 20.100000000000847, 20.20000000000085, 20.30000000000085, 20.40000000000085, 20.500000000000853, 20.600000000000854, 20.700000000000855, 20.800000000000857, 20.90000000000086, 21.00000000000086, 21.10000000000086, 21.200000000000863, 21.300000000000864, 21.400000000000865, 21.500000000000867, 21.60000000000087, 21.70000000000087, 21.80000000000087, 21.900000000000873, 22.000000000000874, 22.100000000000875, 22.200000000000877, 22.30000000000088, 22.40000000000088, 22.50000000000088, 22.600000000000882, 22.700000000000884, 22.800000000000885, 22.900000000000887, 23.000000000000888, 23.10000000000089, 23.20000000000089, 23.300000000000892, 23.400000000000894, 23.500000000000895, 23.600000000000897, 23.700000000000898, 23.8000000000009, 23.9000000000009, 24.000000000000902, 24.100000000000904, 24.200000000000905, 24.300000000000907, 24.400000000000908, 24.50000000000091, 24.60000000000091, 24.700000000000912, 24.800000000000914, 24.900000000000915, 25.000000000000917, 25.100000000000918, 25.20000000000092, 25.30000000000092, 25.400000000000922, 25.500000000000924, 25.600000000000925, 25.700000000000927, 25.800000000000928, 25.90000000000093, 26.00000000000093, 26.100000000000932, 26.200000000000934, 26.300000000000935, 26.400000000000936, 26.500000000000938, 26.60000000000094, 26.70000000000094, 26.800000000000942, 26.900000000000944, 27.000000000000945, 27.100000000000946, 27.200000000000948, 27.30000000000095, 27.40000000000095, 27.500000000000952, 27.600000000000954, 27.700000000000955, 27.800000000000956, 27.900000000000958, 28.00000000000096, 28.10000000000096, 28.200000000000962, 28.300000000000963, 28.400000000000965, 28.500000000000966, 28.600000000000968, 28.70000000000097, 28.80000000000097, 28.900000000000972, 29.000000000000973, 29.100000000000975, 29.200000000000976, 29.300000000000978, 29.40000000000098, 29.50000000000098, 29.600000000000982, 29.700000000000983, 29.800000000000985, 29.900000000000986, 30.000000000000988, 30.10000000000099, 30.20000000000099, 30.300000000000992, 30.400000000000993, 30.500000000000995, 30.600000000000996, 30.700000000000998, 30.800000000001, 30.900000000001, 31.000000000001002, 31.100000000001003, 31.200000000001005, 31.300000000001006, 31.400000000001008, 31.50000000000101, 31.60000000000101, 31.700000000001012, 31.800000000001013, 31.900000000001015, 32.000000000001016, 32.10000000000102, 32.20000000000102, 32.30000000000102, 32.40000000000102, 32.50000000000102, 32.600000000001025, 32.700000000001026, 32.80000000000103, 32.90000000000103, 33.00000000000103, 33.10000000000103, 33.20000000000103, 33.300000000001035, 33.400000000001036, 33.50000000000104, 33.60000000000104, 33.70000000000104, 33.80000000000104, 33.90000000000104, 34.000000000001044, 34.100000000001046, 34.20000000000105, 34.30000000000105, 34.40000000000105, 34.50000000000105, 34.60000000000105, 34.700000000001054, 34.800000000001056, 34.90000000000106, 35.00000000000106, 35.10000000000106, 35.20000000000106, 35.30000000000106, 35.400000000001064, 35.500000000001066, 35.60000000000107, 35.70000000000107, 35.80000000000107, 35.90000000000107, 36.00000000000107, 36.100000000001074, 36.200000000001076, 36.30000000000108, 36.40000000000108, 36.50000000000108, 36.60000000000108, 36.70000000000108, 36.800000000001084, 36.900000000001086, 37.00000000000109, 37.10000000000109, 37.20000000000109, 37.30000000000109, 37.40000000000109, 37.500000000001094, 37.600000000001096, 37.7000000000011, 37.8000000000011, 37.9000000000011, 38.0000000000011, 38.1000000000011, 38.200000000001104, 38.300000000001106, 38.40000000000111, 38.50000000000111, 38.60000000000111, 38.70000000000111, 38.80000000000111, 38.900000000001114, 39.000000000001116, 39.10000000000112, 39.20000000000112, 39.30000000000112, 39.40000000000112, 39.50000000000112, 39.600000000001124, 39.700000000001125, 39.80000000000113, 39.90000000000113, 40.00000000000113, 40.10000000000113, 40.20000000000113, 40.300000000001134, 40.400000000001135, 40.50000000000114, 40.60000000000114, 40.70000000000114, 40.80000000000114, 40.90000000000114, 41.000000000001144, 41.100000000001145, 41.20000000000115, 41.30000000000115, 41.40000000000115, 41.50000000000115, 41.60000000000115, 41.700000000001154, 41.800000000001155, 41.90000000000116, 42.00000000000116, 42.10000000000116, 42.20000000000116, 42.30000000000116, 42.400000000001164, 42.500000000001165, 42.60000000000117, 42.70000000000117, 42.80000000000117, 42.90000000000117, 43.00000000000117, 43.100000000001174, 43.200000000001175, 43.30000000000118, 43.40000000000118, 43.50000000000118, 43.60000000000118, 43.70000000000118, 43.800000000001184, 43.900000000001185, 44.00000000000119, 44.10000000000119, 44.20000000000119, 44.30000000000119, 44.40000000000119, 44.500000000001194, 44.600000000001195, 44.7000000000012, 44.8000000000012, 44.9000000000012, 45.0000000000012, 45.1000000000012, 45.200000000001204, 45.300000000001205, 45.40000000000121, 45.50000000000121, 45.60000000000121, 45.70000000000121, 45.80000000000121, 45.900000000001214, 46.000000000001215, 46.10000000000122, 46.20000000000122, 46.30000000000122, 46.40000000000122, 46.50000000000122, 46.600000000001224, 46.700000000001225, 46.800000000001226, 46.90000000000123, 47.00000000000123, 47.10000000000123, 47.20000000000123, 47.30000000000123, 47.400000000001235, 47.500000000001236, 47.60000000000124, 47.70000000000124, 47.80000000000124, 47.90000000000124, 48.00000000000124, 48.100000000001245, 48.200000000001246, 48.30000000000125, 48.40000000000125, 48.50000000000125, 48.60000000000125, 48.70000000000125, 48.800000000001255, 48.900000000001256, 49.00000000000126, 49.10000000000126, 49.20000000000126, 49.30000000000126, 49.40000000000126, 49.500000000001265, 49.600000000001266, 49.70000000000127, 49.80000000000127, 49.90000000000127, 50.00000000000127, 50.10000000000127, 50.200000000001275, 50.300000000001276, 50.40000000000128, 50.50000000000128, 50.60000000000128, 50.70000000000128, 50.80000000000128, 50.900000000001285, 51.000000000001286, 51.10000000000129, 51.20000000000129, 51.30000000000129, 51.40000000000129, 51.50000000000129, 51.600000000001295, 51.700000000001296, 51.8000000000013, 51.9000000000013, 52.0000000000013, 52.1000000000013, 52.2000000000013, 52.300000000001305, 52.400000000001306};
  std::vector<double> y_values{1.8614403292181076, 1.8935561558871385, 1.9262407422960057, 1.960419501133789, 1.9970178450895706, 2.036961186852431, 2.0811749391114525, 2.1305845145557143, 2.186115325874299, 2.248692785756288, 2.3192423068907613, 2.3986893019668005, 2.4879591836734876, 2.587413426275881, 2.69515775034296, 2.808733938019679, 2.925683771450996, 3.043549032781868, 3.15987150415725, 3.2721929677220993, 3.3780552056213735, 3.475000000000029, 3.56664764416057, 3.657669259276517, 3.747182869299366, 3.8343064981806076, 3.918158169871737, 3.9978559083242446, 4.072517737489627, 4.141261681319374, 4.20320576376498, 4.257468008777939, 4.303166440309743, 4.339419082311886, 4.36534395873586, 4.380059093533159, 4.382682510655276, 4.372332234053703, 4.348126287679936, 4.3091826954854655, 4.254619481421783, 4.183554669440387, 4.095106283492767, 3.9883923475304153, 3.8625308855048264, 3.716639921367494, 3.549837479069912, 3.3612415825635695, 3.149970255799964, 2.9209296623381293, 2.7021785241672323, 2.5275637028839553, 2.4309320600849826, 2.446130457366998, 2.6070057563266866, 2.9474048185607304, 3.501174505665816, 4.302161679238626, 5.384213200875843, 6.781175932174153, 8.526896734730238, 10.655222470140787, 13.199999999999488, 12.639289623034673, 12.096113525623764, 11.570208605818193, 11.061311761669376, 10.569159891228747, 10.093489892547721, 9.634038663677728, 9.190543102670189, 8.762740107576532, 8.350366576448172, 7.953159407336544, 7.570855498293066, 7.203191747369165, 6.849905052616263, 6.5107323120857865, 6.185410423829158, 5.873676285897803, 5.575266796343142, 5.289918853216603, 5.01736935456961, 4.757355198453586, 4.509613282919955, 4.2738805060201415, 4.04989376580557, 3.8373899603276658, 3.6361059876378494, 3.4457787457875493, 3.2661451328281865, 3.096942046811187, 2.937906385787975, 2.788775047809973, 2.6492849309286064, 2.519172933195299, 2.3981759526614757, 2.2860308873785598, 2.1824746353979765, 2.0872440947711484, 2.000076163549502, 1.9207077397844585, 1.8488757215274445, 1.784317006829883, 1.7267684937431986, 1.6759670803188154, 1.6316496646081575, 1.5935531446626492, 1.5614144185337142, 1.5349703842727775, 1.5139579399312633, 1.4981139835605946, 1.4871754132121964, 1.4808791269374928, 1.4789620227879081, 1.4811609988148664, 1.4872129530697917, 1.4968547836041084, 1.5098233884692407, 1.5258556657166122, 1.544688513397648, 1.5660588295637718, 1.5897035122664076, 1.6153594595569796, 1.6427635694869123, 1.67165274010763, 1.7017638694705561, 1.7328338556271154, 1.7645995966287322, 1.79679799052683, 1.8291659353728338, 1.8614403292181676, 1.8935561558871985, 1.9262407422960677, 1.960419501133855, 1.9970178450896419, 2.0369611868525093, 2.081174939111539, 2.130584514555812, 2.186115325874409, 2.248692785756412, 2.319242306890901, 2.3986893019669577, 2.4879591836736634, 2.587413426276075, 2.6951577503431667, 2.8087339380198957, 2.9256837714512156, 3.043549032782087, 3.1598715041574637, 3.2721929677223045, 3.3780552056215636, 3.4750000000002, 3.56664764416074, 3.6576692592766853, 3.747182869299531, 3.8343064981807675, 3.9181581698718886, 3.9978559083243894, 4.072517737489761, 4.141261681319496, 4.203205763765089, 4.257468008778031, 4.30316644030982, 4.339419082311943, 4.365343958735899, 4.380059093533176, 4.382682510655269, 4.372332234053672, 4.348126287679877, 4.309182695485378, 4.254619481421667, 4.183554669440238, 4.0951062834925835, 3.9883923475301986, 3.8625308855045737, 3.7166399213672032, 3.54983747906958, 3.3612415825631974, 3.1499702557995484, 2.9209296623377012, 2.702178524166855, 2.5275637028836915, 2.430932060084896, 2.4461304573671523, 2.6070057563271436, 2.9474048185615547, 3.501174505667069, 4.302161679240371, 5.384213200878145, 6.781175932177073, 8.526896734733842, 10.655222470145134, 13.199999999998425, 12.639289623033642, 12.096113525622764, 11.570208605817225, 11.061311761668444, 10.569159891227846, 10.09348989254685, 9.634038663676884, 9.190543102669379, 8.762740107575745, 8.350366576447419, 7.953159407335817, 7.570855498292368, 7.203191747368493, 6.849905052615617, 6.5107323120851675, 6.185410423828564, 5.873676285897233, 5.575266796342596, 5.289918853216083, 5.017369354569113, 4.757355198453112, 4.509613282919504, 4.273880506019713, 4.049893765805163, 3.837389960327279, 3.636105987637485, 3.445778745787204, 3.2661451328278615, 3.0969420468108813, 2.937906385787687, 2.788775047809704, 2.649284930928355, 2.5191729331950654, 2.398175952661259, 2.2860308873783595, 2.182474635397791, 2.0872440947709783, 2.000076163549346, 1.9207077397843177, 1.8488757215273164, 1.7843170068297682, 1.7267684937430965, 1.6759670803187257, 1.6316496646080798, 1.5935531446625828, 1.5614144185336594, 1.5349703842727331, 1.5139579399312282, 1.4981139835605692, 1.4871754132121802, 1.4808791269374852, 1.4789620227879086, 1.4811609988148744, 1.4872129530698068, 1.49685478360413, 1.509823388469268, 1.5258556657166453, 1.544688513397686, 1.566058829563814, 1.589703512266454, 1.61535945955703, 1.6427635694869656, 1.6716527401076853, 1.7017638694706134, 1.7328338556271747, 1.7645995966287922, 1.7967979905268912, 1.8291659353728948, 1.861440329218228, 1.8935561558872598, 1.9262407422961303, 1.960419501133921, 1.9970178450897136, 2.0369611868525883, 2.081174939111627, 2.1305845145559106, 2.1861153258745203, 2.248692785756537, 2.319242306891042, 2.3986893019671163, 2.4879591836738415, 2.587413426276271, 2.695157750343376, 2.8087339380201124, 2.925683771451438, 3.0435490327823076, 3.1598715041576795, 3.2721929677225097, 3.3780552056217554, 3.4750000000003722, 3.5666476441609123, 3.657669259276856, 3.7471828692996976, 3.8343064981809287, 3.9181581698720436, 3.9978559083245346, 4.072517737489895, 4.1412616813196195, 4.203205763765197, 4.257468008778127, 4.303166440309897, 4.339419082312003, 4.365343958735936, 4.380059093533192, 4.382682510655262, 4.37233223405364, 4.3481262876798175, 4.3091826954852905, 4.25461948142155, 4.183554669440088, 4.095106283492401, 3.9883923475299796, 3.8625308855043192, 3.7166399213669092, 3.5498374790692453, 3.361241582562821, 3.1499702557991283, 2.9209296623372696, 2.7021785241664737, 2.527563702883426, 2.430932060084809, 2.446130457367307, 2.607005756327605, 2.9474048185623856, 3.5011745056683337, 4.3021616792421336, 5.384213200880469, 6.7811759321800205, 8.526896734737477, 10.655222470149525, 13.19999999999735, 12.639289623032603, 12.09611352562176, 11.570208605816253, 11.061311761667502, 10.569159891226935, 10.093489892545973, 9.634038663676034, 9.190543102668556, 8.762740107574956, 8.350366576446657, 7.953159407335082, 7.570855498291662, 7.203191747367815, 6.849905052614966, 6.510732312084542, 6.185410423827964, 5.873676285896658, 5.5752667963420475, 5.289918853215558, 5.017369354568612, 4.757355198452634, 4.509613282919049, 4.273880506019281, 4.049893765804753, 3.8373899603268895, 3.636105987637116, 3.4457787457868565, 3.2661451328275333, 3.096942046810573, 2.9379063857873975, 2.788775047809432, 2.6492849309281015, 2.5191729331948287, 2.3981759526610396, 2.286030887378156, 2.182474635397604, 2.0872440947708073, 2.0000761635491893, 1.9207077397841752, 1.848875721527189, 1.7843170068296543, 1.726768493742996, 1.6759670803186368, 1.6316496646080032, 1.5935531446625175, 1.5614144185336047, 1.5349703842726887, 1.513957939931194, 1.4981139835605444, 1.4871754132121642, 1.480879126937478, 1.4789620227879088, 1.4811609988148822, 1.4872129530698215, 1.496854783604151, 1.509823388469295, 1.525855665716678, 1.5446885133977237, 1.5660588295638564, 1.5897035122665, 1.6153594595570793, 1.6427635694870182, 1.6716527401077406, 1.701763869470671, 1.7328338556272336, 1.7645995966288526, 1.7967979905269513, 1.829165935372955, 1.8614403292182882, 1.89355615588732, 1.9262407422961925, 1.9604195011339869, 1.9970178450897849, 2.0369611868526665, 2.081174939111714, 2.130584514556008, 2.18611532587463, 2.2486927857566603, 2.3192423068911805, 2.398689301967273, 2.4879591836740174, 2.5874134262764645, 2.695157750343583, 2.8087339380203282, 2.9256837714516566, 3.0435490327825265, 3.159871504157893, 3.272192967722714, 3.3780552056219446, 3.4750000000005428, 3.566647644161083, 3.6576692592770246, 3.7471828692998623, 3.834306498181088, 3.918158169872197, 3.9978559083246785, 4.07251773749003, 4.141261681319741, 4.2032057637653075, 4.25746800877822, 4.303166440309974, 4.339419082312061, 4.365343958735975, 4.380059093533209, 4.382682510655255, 4.372332234053607, 4.34812628767976, 4.3091826954852035, 4.254619481421432, 4.183554669439941, 4.095106283492219, 3.988392347529763, 3.8625308855040648, 3.716639921366618, 3.5498374790689144, 3.3612415825624486, 3.1499702557987126, 2.920929662336841, 2.7021785241660967, 2.5275637028831626, 2.4309320600847224, 2.4461304573674605, 2.607005756328062, 2.947404818563209, 3.5011745056695864, 4.302161679243878, 5.384213200882769, 6.781175932182942, 8.526896734741081, 10.655222470153872, 13.199999999996288, 12.639289623031575, 12.096113525620765, 11.570208605815289, 11.061311761666568, 10.56915989122603, 10.093489892545096, 9.634038663675193, 9.190543102667744, 8.762740107574169, 8.350366576445902, 7.953159407334358, 7.570855498290961, 7.203191747367141, 6.849905052614321, 6.510732312083921, 6.185410423827371, 5.873676285896089, 5.575266796341503, 5.289918853215037, 5.017369354568114, 4.75735519845216, 4.509613282918599, 4.273880506018852, 4.049893765804346, 3.837389960326504, 3.6361059876367507, 3.445778745786511, 3.266145132827208, 3.096942046810266, 2.9379063857871093, 2.7887750478091626, 2.64928493092785, 2.5191729331945947, 2.3981759526608215, 2.2860308873779553, 2.1824746353974183, 2.0872440947706368, 2.000076163549034, 1.9207077397840346, 1.848875721527062, 1.7843170068295404, 1.7267684937428947, 1.6759670803185485, 1.6316496646079264, 1.593553144662452, 1.5614144185335503, 1.5349703842726443, 1.5139579399311598, 1.4981139835605197, 1.4871754132121482, 1.4808791269374704, 1.4789620227879092, 1.48116099881489, 1.487212953069836, 1.4968547836041721, 1.5098233884693226, 1.5258556657167106, 1.5446885133977613, 1.5660588295638982, 1.589703512266546, 1.6153594595571286, 1.6427635694870706, 1.6716527401077954, 1.7017638694707282, 1.7328338556272922, 1.7645995966289119, 1.7967979905270117, 1.8291659353730156, 1.861440329218348, 1.8935561558873801, 1.9262407422962542, 1.9604195011340526, 1.9970178450898557, 2.0369611868527446, 2.081174939111801, 2.1305845145561055, 2.18611532587474, 2.248692785756785, 2.319242306891321, 2.3986893019674302, 2.487959183674194, 2.587413426276659, 2.6951577503437907, 2.808733938020544, 2.9256837714518773, 3.043549032782746, 3.159871504158108, 3.272192967722919, 3.3780552056221356, 3.475000000000714, 3.566647644161254, 3.6576692592771938, 3.7471828693000275, 3.8343064981812485, 3.918158169872349, 3.9978559083248237, 4.0725177374901635, 4.141261681319862, 4.203205763765415, 4.257468008778313, 4.30316644031005, 4.339419082312118, 4.3653439587360126, 4.380059093533225, 4.382682510655249, 4.372332234053576, 4.348126287679701, 4.309182695485117, 4.254619481421317, 4.1835546694397925, 4.095106283492039, 3.988392347529548, 3.8625308855038143, 3.716639921366329, 3.5498374790685867, 3.3612415825620787, 3.149970255798301, 2.920929662336417, 2.702178524165723, 2.5275637028829014, 2.4309320600846362, 2.4461304573676133, 2.6070057563285145, 2.9474048185640243, 3.501174505670827, 4.302161679245608, 5.384213200885048, 6.7811759321858345, 8.526896734744648, 10.655222470158177, 13.199999999995237, 12.639289623030551, 12.096113525619776, 11.570208605814333, 11.061311761665646, 10.569159891225137, 10.093489892544236, 9.634038663674362, 9.190543102666938, 8.762740107573396, 8.350366576445152, 7.953159407333637, 7.5708554982902685, 7.203191747366477, 6.849905052613682, 6.510732312083308, 6.18541042382678, 5.873676285895525, 5.575266796340965, 5.2899188532145205, 5.017369354567624, 4.757355198451691, 4.50961328291815, 4.273880506018427, 4.049893765803942, 3.837389960326123, 3.6361059876363884, 3.445778745786169, 3.266145132826886, 3.096942046809963, 2.9379063857868246, 2.788775047808897, 2.649284930927601, 2.519172933194363, 2.3981759526606066, 2.286030887377756, 2.1824746353972353, 2.0872440947704685, 2.0000761635488806, 1.9207077397838948, 1.8488757215269358, 1.7843170068294276, 1.7267684937427947, 1.6759670803184608, 1.6316496646078504, 1.5935531446623876, 1.5614144185334964, 1.534970384272601, 1.5139579399311258, 1.498113983560495, 1.4871754132121322, 1.4808791269374626, 1.4789620227879097, 1.4811609988148975, 1.4872129530698506, 1.496854783604193, 1.5098233884693493, 1.5258556657167428, 1.5446885133977983, 1.56605882956394, 1.5897035122665917, 1.615359459557178, 1.6427635694871225, 1.6716527401078503, 1.7017638694707846, 1.7328338556273504, 1.764599596628971, 1.7967979905270712, 1.8291659353730756, 1.861440329218407, 1.8935561558874394, 1.926240742296316, 1.9604195011341177, 1.9970178450899263, 2.0369611868528223, 2.0811749391118877, 2.130584514556202, 2.1861153258748485, 2.2486927857569077, 2.319242306891459, 2.3986893019675857, 2.4879591836743686, 2.587413426276852, 2.6951577503439954, 2.808733938020757, 2.9256837714520945, 3.043549032782963, 3.1598715041583194, 3.2721929677231203, 3.3780552056223234, 3.4750000000008843, 3.5666476441614234, 3.6576692592773603, 3.7471828693001914, 3.8343064981814066, 3.9181581698725, 3.9978559083249663, 4.072517737490297, 4.1412616813199845, 4.203205763765523, 4.257468008778407, 4.303166440310126, 4.339419082312177, 4.365343958736052, 4.380059093533243, 4.382682510655242, 4.372332234053545, 4.348126287679643, 4.30918269548503, 4.2546194814212, 4.183554669439645, 4.095106283491858, 3.988392347529332, 3.862530885503561, 3.716639921366038, 3.549837479068255, 3.3612415825617066, 3.1499702557978853, 2.920929662335989, 2.7021785241653458, 2.5275637028826377, 2.43093206008455, 2.4461304573677674, 2.607005756328971, 2.9474048185648485, 3.5011745056720804, 4.302161679247353, 5.384213200887349, 6.781175932188755, 8.526896734748252, 10.655222470162524, 13.199999999994175, 12.639289623029525, 12.09611352561878, 11.570208605813367, 11.061311761664712, 10.569159891224235, 10.093489892543362, 9.634038663673516, 9.190543102666126, 8.762740107572611, 8.350366576444399, 7.953159407332909, 7.570855498289571, 7.203191747365803, 6.849905052613036, 6.510732312082689, 6.185410423826188, 5.873676285894956, 5.57526679634042, 5.289918853214003, 5.017369354567127, 4.757355198451218, 4.509613282917701, 4.273880506017999, 4.049893765803535, 3.8373899603257353, 3.636105987636024, 3.445778745785825, 3.2661451328265607, 3.0969420468096573, 2.9379063857865386, 2.7887750478086275, 2.649284930927349, 2.519172933194129, 2.3981759526603894, 2.2860308873775548, 2.1824746353970497, 2.087244094770299, 2.0000761635487248, 1.920707739783754, 1.8488757215268086, 1.784317006829314, 1.7267684937426937, 1.6759670803183722, 1.6316496646077734, 1.593553144662322, 1.5614144185334415, 1.5349703842725566, 1.5139579399310914, 1.49811398356047, 1.4871754132121162, 1.480879126937455, 1.47896202278791, 1.4811609988149053, 1.4872129530698655, 1.4968547836042143, 1.5098233884693761, 1.5258556657167752, 1.544688513397836, 1.5660588295639821, 1.5897035122666376, 1.6153594595572276, 1.6427635694871754, 1.6716527401079053, 1.7017638694708417, 1.7328338556274088, 1.7645995966290307, 1.7967979905271316, 1.8291659353731358, 1.8614403292184674, 1.8935561558874994, 1.9262407422963785, 1.9604195011341832, 1.9970178450899974, 2.0369611868529005, 2.0811749391119743, 2.1305845145563, 2.1861153258749586, 2.248692785757031, 2.319242306891599, 2.3986893019677433, 2.4879591836745445, 2.5874134262770454, 2.6951577503442032, 2.808733938020974, 2.925683771452315, 3.0435490327831825, 3.159871504158534, 3.2721929677233255, 3.378055205622514, 3.4750000000010552, 3.5666476441615926, 3.6576692592775295, 3.7471828693003557, 3.834306498181567, 3.918158169872653, 3.99785590832511, 4.072517737490431, 4.141261681320106, 4.203205763765633, 4.2574680087785, 4.303166440310203, 4.339419082312236, 4.365343958736088, 4.380059093533258, 4.3826825106552345, 4.372332234053511, 4.348126287679585, 4.309182695484943, 4.254619481421083, 4.183554669439497, 4.095106283491676, 3.988392347529116, 3.8625308855033085, 3.716639921365746, 3.5498374790679246, 3.361241582561334, 3.1499702557974687, 2.9209296623355607, 2.702178524164968, 2.5275637028823743, 2.430932060084464, 2.4461304573679206, 2.607005756329428, 2.9474048185656714, 3.5011745056733337, 4.302161679249099, 5.384213200889652, 6.781175932191675, 8.526896734751853, 10.655222470166873, 13.199999999993114, 12.639289623028494, 12.096113525617785, 11.570208605812406, 11.061311761663779, 10.569159891223332, 10.093489892542488, 9.634038663672676, 9.190543102665316, 8.762740107571828, 8.350366576443642, 7.953159407332184, 7.57085549828887, 7.203191747365133, 6.8499050526123915, 6.510732312082068, 6.1854104238255925, 5.873676285894388, 5.575266796339876, 5.289918853213481, 5.01736935456663, 4.757355198450745, 4.50961328291725, 4.27388050601757, 4.049893765803129, 3.83738996032535, 3.6361059876356587, 3.4457787457854794, 3.2661451328262356, 3.0969420468093514, 2.937906385786251, 2.788775047808359, 2.6492849309270983, 2.519172933193895, 2.398175952660172, 2.286030887377354, 2.1824746353968645, 2.0872440947701283, 2.00007616354857, 1.920707739783613, 1.8488757215266818, 1.7843170068292002, 1.726768493742593, 1.6759670803182833, 1.6316496646076968, 1.5935531446622568, 1.5614144185333871, 1.5349703842725124, 1.5139579399310572, 1.4981139835604451, 1.4871754132121002, 1.4808791269374475, 1.4789620227879103, 1.481160998814913, 1.4872129530698803, 1.4968547836042356, 1.5098233884694034, 1.525855665716808, 1.5446885133978736, 1.5660588295640239, 1.5897035122666838, 1.615359459557277, 1.6427635694872278, 1.6716527401079604, 1.701763869470899, 1.7328338556274676, 1.7645995966290906, 1.796797990527192, 1.8291659353731962};
  // clang-format on

  SECTION("bspline.evaluate(...)")
  {
    for (size_t i{0}; i < x_values.size(); i++)
    {
      REQUIRE_THAT(bspline.evaluate(x_values.at(i)), WithinRel(y_values.at(i)));
    }
  }

  SECTION("bspline.fit(...)")
  {
    bspline.fit(x_values, y_values);
    auto control_points = bspline.get_control_points();
    size_t i{0};
    for (; i < c_data.size(); i++)
    {
      REQUIRE_THAT(control_points.at(i), WithinRel(c_data.at(i), 1e-6));
    }
    for (size_t j{0}; j < degree; j++)
    {
      REQUIRE_THAT(control_points.at(i + j), WithinRel(c_data.at(j), 1e-6));
    }
  }
}
